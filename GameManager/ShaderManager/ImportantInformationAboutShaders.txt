Excerpt from the Vulkan Tutorial by Alexander Overvoorde - October 2019 - page 97 - 98

*** Shader Modules ***

Unlike earlier APIs, shader code in Vulkan has to be specified in a bytecode
format as opposed to human-readable syntax like GLSL and HLSL. This bytecode
format is called SPIR-V and is designed to be used with both Vulkan and
OpenCL (both Khronos APIs). It is a format that can be used to write graphics
and compute shaders, but we will focus on shaders used in Vulkan’s graphics
pipelines in this tutorial.

The advantage of using a bytecode format is that the compilers written by GPU
vendors to turn shader code into native code are significantly less complex. The
past has shown that with human-readable syntax like GLSL, some GPU vendors
were rather flexible with their interpretation of the standard. If you happen to
write non-trivial shaders with a GPU from one of these vendors, then you’d risk
other vendor’s drivers rejecting your code due to syntax errors, or worse, your
shader running differently because of compiler bugs. With a straightforward
bytecode format like SPIR-V that will hopefully be avoided.

However, that does not mean that we need to write this bytecode by hand.
Khronos has released their own vendor-independent compiler that compiles
GLSL to SPIR-V. This compiler is designed to verify that your shader code
is fully standards compliant and produces one SPIR-V binary that you can ship
with your program. You can also include this compiler as a library to produce
SPIR-V at runtime, but we won’t be doing that in this tutorial. Although
we can use this compiler directly via glslangValidator.exe, we will be using
glslc.exe by Google instead. The advantage of glslc is that it uses the same
parameter format as well-known compilers like GCC and Clang and includes
some extra functionality like includes. Both of them are already included in the
Vulkan SDK, so you don’t need to download anything extra.

GLSL is a shading language with a C-style syntax. Programs written in it have
a main function that is invoked for every object. Instead of using parameters
for input and a return value as output, GLSL uses global variables to handle
input and output. The language includes many features to aid in graphics programming,
like built-in vector and matrix primitives. Functions for operations
like cross products, matrix-vector products and reflections around a vector are
included. The vector type is called vec with a number indicating the amount of
elements. For example, a 3D position would be stored in a vec3. It is possible
to access single components through members like .x, but it’s also possible to
create a new vector from multiple components at the same time. For example,
the expression vec3(1.0, 2.0, 3.0).xy would result in vec2. The constructors
of vectors can also take combinations of vector objects and scalar values.
For example, a vec3 can be constructed with vec3(vec2(1.0, 2.0), 3.0).

As the previous chapter mentioned, we need to write a vertex shader and a
fragment shader to get a triangle on the screen. The next two sections will cover
the GLSL code of each of those and after that I’ll show you how to produce two
SPIR-V binaries and load them into the program.

-------------------------------------------------------------------------------------
Excerpt from the Vulkan Tutorial by Alexander Overvoorde - October 2019 - page 103

Compiling the shaders

Store the vertex shader in a file called shader.vert and the fragment shader in
a file called shader.frag in that directory. GLSL shaders don’t have an official
extension, but these two are commonly used to distinguish them.

To compile these into SPIR-V bytecode using the glslc program.

<-- Windows -->

Create a compile.bat file with the following contents:

1 C:/VulkanSDK/x.x.x.x/Bin32/glslc.exe shader.vert -o vert.spv
2 C:/VulkanSDK/x.x.x.x/Bin32/glslc.exe shader.frag -o frag.spv
3 pause

Replace the path to glslc.exe with the path to where you installed the Vulkan
SDK. Double click the file to run it.

<-- Linux -->

Create a compile.sh file with the following contents:

1 /home/user/VulkanSDK/x.x.x.x/x86_64/bin/glslc shader.vert -o vert.spv
2 /home/user/VulkanSDK/x.x.x.x/x86_64/bin/glslc shader.frag -o frag.spv

Replace the path to glslc with the path to where you installed the Vulkan
SDK. Make the script executable with chmod +x compile.sh and run it.